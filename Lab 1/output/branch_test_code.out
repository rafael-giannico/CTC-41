
TINY COMPILATION: ../example/branch_test_code.cm
1: void main (void) {
	1: reserved word: void
	1: ID, name= main
	1: (
	1: reserved word: void
	1: )
	1: {
2:    int x; int a; int b; int i;
	2: reserved word: int
	2: ID, name= x
	2: ;
	2: reserved word: int
	2: ID, name= a
	2: ;
	2: reserved word: int
	2: ID, name= b
	2: ;
	2: reserved word: int
	2: ID, name= i
	2: ;
3:    if (a == b) x = 0;
	3: reserved word: if
	3: (
	3: ID, name= a
	3: ==
	3: ID, name= b
	3: )
	3: ID, name= x
	3: =
	3: NUM, val= 0
	3: ;
4:    else x = 1;
	4: reserved word: else
	4: ID, name= x
	4: =
	4: NUM, val= 1
	4: ;
5: 
6:    if (a < b) {
	6: reserved word: if
	6: (
	6: ID, name= a
	6: <
	6: ID, name= b
	6: )
	6: {
7:       a = b + 1;
	7: ID, name= a
	7: =
	7: ID, name= b
	7: +
	7: NUM, val= 1
	7: ;
8:       b = b + (3 * 5) / 2;
	8: ID, name= b
	8: =
	8: ID, name= b
	8: +
	8: (
	8: NUM, val= 3
	8: *
	8: NUM, val= 5
	8: )
	8: /
	8: NUM, val= 2
	8: ;
9:    }
	9: }
10: 
11:    if (a > b) {
	11: reserved word: if
	11: (
	11: ID, name= a
	11: >
	11: ID, name= b
	11: )
	11: {
12:       a = 8;
	12: ID, name= a
	12: =
	12: NUM, val= 8
	12: ;
13:    } else {
	13: }
	13: reserved word: else
	13: {
14:       b = 75;
	14: ID, name= b
	14: =
	14: NUM, val= 75
	14: ;
15:       a = b * (5 / 3) + 7;
	15: ID, name= a
	15: =
	15: ID, name= b
	15: *
	15: (
	15: NUM, val= 5
	15: /
	15: NUM, val= 3
	15: )
	15: +
	15: NUM, val= 7
	15: ;
16:    }
	16: }
17: 
18:    while (i <= 10)
	18: reserved word: while
	18: (
	18: ID, name= i
	18: <=
	18: NUM, val= 10
	18: )
19:    {
	19: {
20:       b = i * 2;
	20: ID, name= b
	20: =
	20: ID, name= i
	20: *
	20: NUM, val= 2
	20: ;
21:       a = b + 4;
	21: ID, name= a
	21: =
	21: ID, name= b
	21: +
	21: NUM, val= 4
	21: ;
22:       i = i + 1;
	22: ID, name= i
	22: =
	22: ID, name= i
	22: +
	22: NUM, val= 1
	22: ;
23:    }
	23: }
24: }
	24: }
	24: EOF

Syntax tree:
Declare function (return type "void"): main
    Declare int var: x
    Declare int var: a
    Declare int var: b
    Declare int var: i
    Conditional selection
        Op: ==
            Id: a
            Id: b
        Assign to var: x
            Const: 0
        Assign to var: x
            Const: 1
    Conditional selection
        Op: <
            Id: a
            Id: b
        Assign to var: a
            Op: +
                Id: b
                Const: 1
        Assign to var: b
            Op: +
                Id: b
                Op: /
                    Op: *
                        Const: 3
                        Const: 5
                    Const: 2
    Conditional selection
        Op: >
            Id: a
            Id: b
        Assign to var: a
            Const: 8
        Assign to var: b
            Const: 75
        Assign to var: a
            Op: +
                Op: *
                    Id: b
                    Op: /
                        Const: 5
                        Const: 3
                Const: 7
    Iteration (loop)
        Op: <=
            Id: i
            Const: 10
        Assign to var: b
            Op: *
                Id: i
                Const: 2
        Assign to var: a
            Op: +
                Id: b
                Const: 4
        Assign to var: i
            Op: +
                Id: i
                Const: 1

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
a              main      var      int         2  3  6  7 11 12 15 21 
main                     fun      void        1 
input                    fun      int        
output                   fun      void       
b              main      var      int         2  3  6  7  8 11 14 15 20 21 
x              main      var      int         2  3  4 
i              main      var      int         2 18 20 22 

Checking Types...

Type Checking Finished

Checking for main...
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (main)
  3:    LDA  7,0(7) 	jump to main
* -> declare var
* <- declare var
* -> declare var
* <- declare var
* -> declare var
* <- declare var
* -> declare var
* <- declare var
* -> if
* -> Op
* -> Id
  4:     LD  0,-3(2) 	load id value
* <- Id
  5:     ST  0,-6(2) 	op: push left
* -> Id
  6:     LD  0,-4(2) 	load id value
* <- Id
  7:     LD  1,-6(2) 	op: load left
  8:    SUB  0,1,0 	op ==
  9:    JEQ  0,2(7) 	br if true
 10:    LDC  0,0(0) 	false case
 11:    LDA  7,1(7) 	unconditional jmp
 12:    LDC  0,1(0) 	true case
* <- Op
* if: jump to else belongs here
* -> assign
* -> Const
 14:    LDC  0,0(0) 	load const
* <- Const
 15:     ST  0,-2(2) 	assign: store value
* <- assign
* if: jump to end belongs here
 13:    JEQ  0,3(7) 	if: jmp to else
* -> assign
* -> Const
 17:    LDC  0,1(0) 	load const
* <- Const
 18:     ST  0,-2(2) 	assign: store value
* <- assign
 16:    LDA  7,2(7) 	jmp to end
* <- if
* -> if
* -> Op
* -> Id
 19:     LD  0,-3(2) 	load id value
* <- Id
 20:     ST  0,-6(2) 	op: push left
* -> Id
 21:     LD  0,-4(2) 	load id value
* <- Id
 22:     LD  1,-6(2) 	op: load left
 23:    SUB  0,1,0 	op <
 24:    JLT  0,2(7) 	br if true
 25:    LDC  0,0(0) 	false case
 26:    LDA  7,1(7) 	unconditional jmp
 27:    LDC  0,1(0) 	true case
* <- Op
* if: jump to else belongs here
* -> assign
* -> Op
* -> Id
 29:     LD  0,-4(2) 	load id value
* <- Id
 30:     ST  0,-6(2) 	op: push left
* -> Const
 31:    LDC  0,1(0) 	load const
* <- Const
 32:     LD  1,-6(2) 	op: load left
 33:    ADD  0,1,0 	op +
* <- Op
 34:     ST  0,-3(2) 	assign: store value
* <- assign
* -> assign
* -> Op
* -> Id
 35:     LD  0,-4(2) 	load id value
* <- Id
 36:     ST  0,-6(2) 	op: push left
* -> Op
* -> Op
* -> Const
 37:    LDC  0,3(0) 	load const
* <- Const
 38:     ST  0,-7(2) 	op: push left
* -> Const
 39:    LDC  0,5(0) 	load const
* <- Const
 40:     LD  1,-7(2) 	op: load left
 41:    MUL  0,1,0 	op *
* <- Op
 42:     ST  0,-7(2) 	op: push left
* -> Const
 43:    LDC  0,2(0) 	load const
* <- Const
 44:     LD  1,-7(2) 	op: load left
 45:    DIV  0,1,0 	op /
* <- Op
 46:     LD  1,-6(2) 	op: load left
 47:    ADD  0,1,0 	op +
* <- Op
 48:     ST  0,-4(2) 	assign: store value
* <- assign
* if: jump to end belongs here
 28:    JEQ  0,21(7) 	if: jmp to else
 49:    LDA  7,0(7) 	jmp to end
* <- if
* -> if
* -> Op
* -> Id
 50:     LD  0,-3(2) 	load id value
* <- Id
 51:     ST  0,-6(2) 	op: push left
* -> Id
 52:     LD  0,-4(2) 	load id value
* <- Id
 53:     LD  1,-6(2) 	op: load left
 54:    SUB  0,1,0 	op >
 55:    JGT  0,2(7) 	br if true
 56:    LDC  0,0(0) 	false case
 57:    LDA  7,1(7) 	unconditional jmp
 58:    LDC  0,1(0) 	true case
* <- Op
* if: jump to else belongs here
* -> assign
* -> Const
 60:    LDC  0,8(0) 	load const
* <- Const
 61:     ST  0,-3(2) 	assign: store value
* <- assign
* if: jump to end belongs here
 59:    JEQ  0,3(7) 	if: jmp to else
* -> assign
* -> Const
 63:    LDC  0,75(0) 	load const
* <- Const
 64:     ST  0,-4(2) 	assign: store value
* <- assign
* -> assign
* -> Op
* -> Op
* -> Id
 65:     LD  0,-4(2) 	load id value
* <- Id
 66:     ST  0,-6(2) 	op: push left
* -> Op
* -> Const
 67:    LDC  0,5(0) 	load const
* <- Const
 68:     ST  0,-7(2) 	op: push left
* -> Const
 69:    LDC  0,3(0) 	load const
* <- Const
 70:     LD  1,-7(2) 	op: load left
 71:    DIV  0,1,0 	op /
* <- Op
 72:     LD  1,-6(2) 	op: load left
 73:    MUL  0,1,0 	op *
* <- Op
 74:     ST  0,-6(2) 	op: push left
* -> Const
 75:    LDC  0,7(0) 	load const
* <- Const
 76:     LD  1,-6(2) 	op: load left
 77:    ADD  0,1,0 	op +
* <- Op
 78:     ST  0,-3(2) 	assign: store value
* <- assign
 62:    LDA  7,16(7) 	jmp to end
* <- if
* -> while
* repeat: jump after body comes back here
* -> Op
* -> Id
 79:     LD  0,-5(2) 	load id value
* <- Id
 80:     ST  0,-6(2) 	op: push left
* -> Const
 81:    LDC  0,10(0) 	load const
* <- Const
 82:     LD  1,-6(2) 	op: load left
 83:    SUB  0,1,0 	op <=
 84:    JLE  0,2(7) 	br if true
 85:    LDC  0,0(0) 	false case
 86:    LDA  7,1(7) 	unconditional jmp
 87:    LDC  0,1(0) 	true case
* <- Op
* -> assign
* -> Op
* -> Id
 89:     LD  0,-5(2) 	load id value
* <- Id
 90:     ST  0,-6(2) 	op: push left
* -> Const
 91:    LDC  0,2(0) 	load const
* <- Const
 92:     LD  1,-6(2) 	op: load left
 93:    MUL  0,1,0 	op *
* <- Op
 94:     ST  0,-4(2) 	assign: store value
* <- assign
* -> assign
* -> Op
* -> Id
 95:     LD  0,-4(2) 	load id value
* <- Id
 96:     ST  0,-6(2) 	op: push left
* -> Const
 97:    LDC  0,4(0) 	load const
* <- Const
 98:     LD  1,-6(2) 	op: load left
 99:    ADD  0,1,0 	op +
* <- Op
100:     ST  0,-3(2) 	assign: store value
* <- assign
* -> assign
* -> Op
* -> Id
101:     LD  0,-5(2) 	load id value
* <- Id
102:     ST  0,-6(2) 	op: push left
* -> Const
103:    LDC  0,1(0) 	load const
* <- Const
104:     LD  1,-6(2) 	op: load left
105:    ADD  0,1,0 	op +
* <- Op
106:     ST  0,-5(2) 	assign: store value
* <- assign
107:    LDA  7,-29(7) 	jump to savedLoc1
 88:    JEQ  0,19(7) 	repeat: jmp to end
* <- repeat
* <- End Function
* End of execution.
108:   HALT  0,0,0 	
